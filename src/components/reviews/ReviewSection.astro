---
import { Star } from '@lucide/astro';
import { and, eq } from 'drizzle-orm';
import { type productsTable, reviewsTable } from '@/db/schema';
import db from '@/lib/db';
import { getUser } from '@/lib/user';
import ManageReview from './ManageReview';

interface Props {
	product: typeof productsTable.$inferSelect;
}

const { product } = Astro.props;
const productId = product.id;

const user = await getUser(Astro.request);

// Get user's review if it exists
let userReview: typeof reviewsTable.$inferSelect | null = null;
if (user) {
	const userReviewTx = await db
		.select()
		.from(reviewsTable)
		.where(
			and(
				eq(reviewsTable.userId, user.getId()),
				eq(reviewsTable.productId, productId),
			),
		);
	if (userReviewTx[0]) {
		userReview = userReviewTx[0];
	}
}

// Get all reviews for the product
const allReviews = await db
	.select()
	.from(reviewsTable)
	.where(eq(reviewsTable.productId, productId));

// Calculate rating statistics
const avgRating =
	allReviews.length > 0
		? allReviews.reduce((acc, review) => acc + review.rating, 0) /
			allReviews.length
		: 0;

const ratingCounts = {
	1: 0,
	2: 0,
	3: 0,
	4: 0,
	5: 0,
};
allReviews.forEach((review) => {
	ratingCounts[review.rating as keyof typeof ratingCounts]++;
});
---

<div class="space-y-8">
  {/* User Rating Section */}
  {
    user && (
      <div class="border-b pb-6">
        <ManageReview
          review={userReview || undefined}
          productId={productId}
          client:load
        />
      </div>
    )
  }

  {/* Rating Statistics */}
  <div class="space-y-4">
    {/* Average Rating */}
    <div class="flex items-center gap-4">
      <div class="text-4xl font-bold">{avgRating.toFixed(1)}</div>
      <div class="flex items-center">
        {
          Array.from({ length: 5 }).map((_, i) => (
            <Star
              class={
                i < Math.round(avgRating) ? 'text-yellow-400' : 'text-gray-300'
              }
              size={20}
            />
          ))
        }
      </div>
      <div class="text-sm text-gray-600">
        {allReviews.length}
        {allReviews.length === 1 ? 'rating' : 'ratings'}
      </div>
    </div>

    {/* Rating Distribution */}
    <div class="space-y-2">
      {
        [5, 4, 3, 2, 1].map((stars) => (
          <div class="flex items-center gap-2">
            <div class="w-12 text-sm text-gray-600">{stars} stars</div>
            <div class="flex-1 h-2 bg-gray-200 rounded-full overflow-hidden">
              <div
                class="h-full bg-yellow-400 rounded-full"
                style={`width: ${allReviews.length ? (ratingCounts[stars as keyof typeof ratingCounts] / allReviews.length) * 100 : 0}%`}
              />
            </div>
            <div class="w-12 text-sm text-gray-600 text-right">
              {ratingCounts[stars as keyof typeof ratingCounts]}
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>
