---
import { Image } from 'astro:assets';
import { products as productsActions } from '../../actions/products';
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import '../../styles/product.css';
import { Heart } from 'lucide-react';
import ReviewSection from '@/components/ReviewSection.astro';
const { id } = Astro.params;
const productActions = await Astro.callAction(productsActions.getProductById, {
  id: Number(id),
});
const data = productActions.data;

if (!data) {
  return Astro.redirect('/');
}

const { product, isInWishlist } = data;
---

<Layout title={product ? 'Viewing: ' + product.name : 'Product'}>
  <Header />
  {
    product ? (
      <div class="product-details">
        <div class="product">
          <div
            class={`add-to-wishlist-button ${
              isInWishlist ? 'add-to-wishlist-button-active' : ''
            }`}
            id="add-to-wishlist-button"
            product-id={id}
          >
            <Heart />
          </div>
          <div class="product-info">
            <Image
              src={'/api/image/' + product.image + '.png'}
              alt={product.name}
              width={400}
              height={400}
            />
            <h3>{product.name}</h3>
            <p>{product.description}</p>
            <div class="product-rating">
              <span class="product-rating-stars">
                {'â˜…'.repeat(Math.floor(Number(product.rating)))}{' '}
              </span>
              <span class="product-rating-count">
                ({product.reviews} reviews)
              </span>
            </div>
            <div class="product-price">
              <span class="product-price-currency">$</span>
              <span class="product-price-amount">
                {Number(product.price).toFixed(2) || '0.00'}
              </span>
            </div>
            <ReviewSection product={product} server:defer />
            <div class="tooltip-container">
              <button
                class="snipcart-add-item button add-to-cart-button"
                id="popoverTrigger"
                data-item-id={product.id}
                data-item-price={Number(product.price).toFixed(2) || '0.00'}
                data-item-description={product.description}
                data-item-image={product.image || '@assets/mouse.png'}
                data-item-name={product.name}
                data-item-url={Astro.url}
              >
                Add to Cart
              </button>
              <div class="popover-content" id="popoverContent">
                <p>
                  <shopping-basket />
                  <span>{product.name} has been added to your cart!</span>
                </p>
              </div>
            </div>
            <button
              id="buy-now-button"
              class="snipcart-add-item snipcart-checkout"
              data-item-id={product.id}
              data-item-price={Number(product.price).toFixed(2) || '0.00'}
              data-item-description={product.description}
              data-item-image={product.image}
              data-item-name={product.name}
              data-item-url={Astro.url}
            >
              Buy now
            </button>
          </div>
        </div>
      </div>
    ) : (
      <div class="product-details">
        <div class="product">
          <h1>Product not found</h1>
        </div>
      </div>
    )
  }
</Layout>
<div id="snipcart" hidden="true" style="z-index: 1000;"></div>

<script>
  import { actions } from 'astro:actions';
  const addToWishlistButton = document.querySelector('#add-to-wishlist-button');
  if (addToWishlistButton) {
    addToWishlistButton.addEventListener('click', async () => {
      const productId = addToWishlistButton.getAttribute('product-id');
      if (!productId) {
        console.error('Product ID is not set');
        return;
      }
      const { error, data } = await actions.user.toggleProductFromWishlist({
        productId: productId,
      });
      if (!error) {
        if (data.inWishlist) {
          addToWishlistButton.classList.add('add-to-wishlist-button-active');
        } else {
          addToWishlistButton.classList.remove('add-to-wishlist-button-active');
        }
      }
    });
  }

  // document.getElementById('review-form')!.addEventListener('submit', async (event) => {
  //   event.preventDefault();;
  //   const rating = (document.getElementById('review-rating') as HTMLInputElement)!.value;
  //   const productId = { id: Number(id) };

  //   const { error } = await actions.products.addReview({
  //     productId,
  //     rating: Number(rating)
  //   });

  //   if (!error) {
  //     location.reload();
  //   } else {
  //     console.error('Failed to add review');
  //   }
  // });
</script>
