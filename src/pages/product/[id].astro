---
import { Image } from 'astro:assets';
import { products as productsActions } from '../../actions/products';
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import '../../styles/product.css';
import { Toaster } from 'sonner'; // Correct import
import {Heart} from 'lucide-react';
const { id } = Astro.params;
const productActions = await Astro.callAction(productsActions.getProductById, {
  id: Number(id),
});
const product = productActions.data;
---

<Layout title={product ? 'Viewing: ' + product.name : 'Product'}>
  <Header />
  {
    product ? (
      <div class="product-details">
        <div class="product">
          <div class="add-to-wishlist-button" id="add-to-wishlist-button">
              <Heart />
            </div>
          <div class="product-info">
            
            <Image
              src={'/api/image/' + product.image + '.png'}
              alt={product.name}
              width={400}
              height={400}
            />
            <h3>{product.name}</h3>
            <p>{product.description}</p>
            <div class="product-rating">
              <span class="product-rating-stars">
                {'â˜…'.repeat(Math.floor(Number(product.rating)))}{' '}
              </span>
              <span class="product-rating-count">
                ({product.reviews} reviews)
              </span>
            </div>
            <div class="product-price">
              <span class="product-price-currency">$</span>
              <span class="product-price-amount">
                {Number(product.price).toFixed(2) || '0.00'}
              </span>
            </div>

            <div class="tooltip-container">
              <button
                class="snipcart-add-item button add-to-cart-button"
                id="popoverTrigger"
                data-item-id={product.id}
                data-item-price={Number(product.price).toFixed(2) || '0.00'}
                data-item-description={product.description}
                data-item-image={product.image}
                data-item-name={product.name}
                data-item-url={Astro.url}
              >
                Add to Cart
              </button>
              <div class="popover-content" id="popoverContent">
                <p>
                  <shopping-basket />
                  <span>{product.name} has been added to your cart!</span>
                </p>
              </div>
            </div>
            <button
            id="buy-now-button"
              class="snipcart-add-item snipcart-checkout"
              data-item-id={product.id}
              data-item-price={Number(product.price).toFixed(2) || '0.00'}
              data-item-description={product.description}
              data-item-image={product.image}
              data-item-name={product.name}
              data-item-url={Astro.url}
            >
              Buy now
            </button>
          </div>
        </div>
        <Toaster />
      </div>
    ) : (
      <div class="product-details">
        <div class="product">
          <h1>Product not found</h1>
        </div>
      </div>
    )
  }
</Layout>
<div id="snipcart" hidden="true" style="z-index: 1000;"></div>

<script>
  // Client-side JavaScript for the popover functionality
  let hideTimeout: number | null = null;

  // Function to run after the DOM is fully loaded
  function initializePopover() {
    const trigger = document.getElementById('popoverTrigger');
    const content = document.getElementById('popoverContent');

    console.log('Trigger element:', trigger);
    console.log('Content element:', content);

    if (trigger && content) {
      // Ensure popover is hidden initially
      content.style.display = 'none';

      trigger.addEventListener('click', () => {
        console.log('Button clicked');
        // Don't stop propagation as it might interfere with snipcart

        // Clear any existing timeout
        if (hideTimeout !== null) {
          clearTimeout(hideTimeout);
        }

        // Show the popover
        content.style.display = 'block';
        console.log('Popover shown, setting timeout');
        // Set a new timeout to hide after 5 seconds
        hideTimeout = window.setTimeout(() => {
          console.log('Timeout triggered, hiding popover');
          content.style.display = 'none';
        }, 1000);
      });
    }
  }

  // Run when the DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePopover);
  } else {
    initializePopover();
  }

  // Also run when Snipcart might be initialized
  document.addEventListener('snipcart.ready', initializePopover);
</script>
<script>
  const addToWishlistButton = document.querySelector('#add-to-wishlist-button');
  if (addToWishlistButton) {
    addToWishlistButton.addEventListener('click', () => {
      console.log('Add to wishlist button clicked');
    });
  }
</script>