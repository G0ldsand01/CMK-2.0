---
import { Button } from '@/components/ui/button';
import { ShoppingCart } from 'lucide-react';
import Layout from '../layouts/Layout.astro';
---

<Layout title="3D Print Quote Service" navbar={true}>
  <div class="flex flex-col items-center justify-center min-h-screen px-4 py-12 bg-background">
    <div class="w-full max-w-2xl bg-muted p-8 rounded-2xl shadow-xl">
      <div class="text-center mb-8">
        <h1 class="text-3xl md:text-4xl font-bold text-foreground">3D Print Quote Service</h1>
        <p class="text-sm md:text-base text-muted-foreground mt-2">Send us your files and we will print them for you</p>
      </div>

      <form class="space-y-8" id="quote-form">
        <!-- Page 1 -->
        <div class="form-step page1 space-y-4">
          <div class="flex flex-col md:flex-row gap-4">
            <input type="text" name="firstName" placeholder="First Name" class="flex-1 px-4 py-2 border border-border rounded-md bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary" required />
            <input type="text" name="lastName" placeholder="Last Name" class="flex-1 px-4 py-2 border border-border rounded-md bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary" required />
          </div>

          <input type="email" name="email" placeholder="Email" class="w-full px-4 py-2 border border-border rounded-md bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary" required />

          <div class="flex flex-col md:flex-row gap-4">
            <input type="text" name="address" placeholder="Address" class="flex-1 px-4 py-2 border border-border rounded-md bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary" />
            <input type="text" name="city" placeholder="City" class="flex-1 px-4 py-2 border border-border rounded-md bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary" />
          </div>

          <div class="flex flex-col md:flex-row gap-4">
            <input type="text" name="state" placeholder="State" class="flex-1 px-4 py-2 border border-border rounded-md bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary" />
            <input type="text" name="zip" placeholder="Zip" class="flex-1 px-4 py-2 border border-border rounded-md bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary" />
          </div>

          <div class="flex justify-end">
            <Button type="button" className="next-page-button">Next</Button>
          </div>
        </div>

        <!-- Page 2 -->
        <div class="form-step page2 hidden space-y-4">
          <input type="file" name="file" accept=".stl" class="w-full px-4 py-2 border border-border rounded-md bg-background text-foreground file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-primary file:var (--color-foreground) hover:file:bg-primary/80" />

          <select name="material" class="w-full px-4 py-2 border border-border rounded-md bg-muted text-foreground focus:outline-none focus:ring-2 focus:ring-primary">
            <option value="PLA">PLA</option>
            <option value="ABS">ABS</option>
            <option value="PETG">PETG</option>
            <option value="TPU">TPU</option>
          </select>

          <label class="text-sm text-foreground">Size / Printer:</label>
          <select name="size-printer" class="w-full px-4 py-2 border border-border rounded-md bg-muted text-foreground focus:outline-none">
            <option value="small">Small / A1 mini / 180mm</option>
            <option value="ender3">Ender 3 / 220mm</option>
            <option value="large">Large / A1 / 256mm</option>
          </select>

          <label class="text-sm text-foreground">Color:</label>
          <select name="color"  class="w-full px-4 py-2 border border-border rounded-md bg-muted text-foreground focus:outline-none">
            <option value="#000000">Black</option>
            <option value="#ffffff">White</option>
            <option value="#808080">Grey</option>
            <option value="#0000ff">Blue</option>
          </select>

          <input type="text" name="notes" placeholder="Anything we should know?" class="w-full px-4 py-2 border border-border rounded-md bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary" />

          <div class="flex justify-between">
            <Button type="button" className="prev-page-button">Previous</Button>
            <Button type="button" className="next-page-button">Next</Button>
          </div>
        </div>

        <!-- Page 3 -->
        <div class="form-step page3 hidden space-y-6">
          <h2 class="text-xl font-semibold text-center text-foreground">Here's a preview of your model</h2>
          <div class="three-viewer flex justify-center items-center">
            <canvas id="3d-canvas" width="300" height="300" class="rounded-lg border border-border"></canvas>
          </div>
          <p class="text-center text-lg text-muted-foreground">
            Estimated Cost: <span id="cost-estimate" class="text-green-600 dark:text-green-400 font-bold">0.00 $</span>
          </p>
          <div class="flex justify-between">
            <Button type="button" className="prev-page-button">Previous</Button>
            <Button type="submit" className="checkout-button">
              <ShoppingCart />
              Go to Checkout
            </Button>
          </div>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const steps = document.querySelectorAll('.form-step');
    let currentStep = 0;

    const showStep = (index: number) => {
      steps.forEach((step, i) => {
        step.classList.toggle('hidden', i !== index);
      });
    };

    document.querySelectorAll('.next-page-button').forEach(btn => {
      btn.addEventListener('click', () => {
        if (currentStep < steps.length - 1) {
          currentStep++;
          showStep(currentStep);
        }
      });
    });

    document.querySelectorAll('.prev-page-button').forEach(btn => {
      btn.addEventListener('click', () => {
        if (currentStep > 0) {
          currentStep--;
          showStep(currentStep);
        }
      });
    });

    showStep(currentStep); // initialize
    // Enable color/printer selects only after material is selected
    const materialSelect = document.querySelector('select[name="material"]');
    const printerSelect = document.querySelector('select[name="size-printer"]');
    const colorSelect = document.querySelector('select[name="color"]');

    materialSelect.addEventListener('change', () => {
      printerSelect.disabled = false;
      colorSelect.disabled = false;
    });

    // === STL PREVIEW ===
    function renderSTLPreview() {
      const fileInput = document.querySelector('input[type="file"]');
      const canvas = document.getElementById('3d-canvas');
      const renderer = new THREE.WebGLRenderer({ canvas, alpha: true });
      renderer.setSize(300, 300);

      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
      camera.position.set(0, 0, 70);

      const light = new THREE.DirectionalLight(0xffffff, 1);
      light.position.set(0, 0, 100).normalize();
      scene.add(light);

      const loader = new STLLoader();

      const file = fileInput.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = function (e) {
        const contents = e.target.result;

        const geometry = loader.parse(contents);
        const material = new THREE.MeshStandardMaterial({ color: 0x2194ce });
        const mesh = new THREE.Mesh(geometry, material);

        geometry.center();
        mesh.rotation.x = -0.5 * Math.PI;
        scene.add(mesh);

        animate();
      };
      reader.readAsArrayBuffer(file);

      function animate() {
        requestAnimationFrame(animate);
        scene.rotation.y += 0.005;
        renderer.render(scene, camera);
      }
    }
  });
</script>
