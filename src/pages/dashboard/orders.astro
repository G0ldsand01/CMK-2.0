---
import DashboardLayout from "@/layouts/DashboardLayout.astro";
import Header from "@/components/Header.astro";
import { getSession } from "auth-astro/server";
const session = await getSession(Astro.request);

if (!session) {
  return Astro.redirect("/login");
}

// Clé API Snipcart (Met-la dans une variable d'environnement pour la sécurité)
const API_KEY = import.meta.env.SNIPCART_SECRET_KEY;
const userEmail = session.user.email;

// Define orders with a default value (empty array)
let orders: Order[] = [];

// Récupération des commandes depuis Snipcart pour l'email de l'utilisateur
const response = await fetch(`https://app.snipcart.com/api/orders?email=${encodeURIComponent(userEmail)}`, {
  headers: {
    Authorization: `Basic ${btoa(API_KEY)}`,
    "Content-Type": "application/json",
  },
});

// Define the type for an order, including the email
interface Order {
  orderId: string;
  orderDate: string;
  total: number;
  status: string;
  email: string; // Add the email property
}

try {
  const data = await response.json();
  console.log(`Snipcart API Response for ${userEmail}:`, data); // Log the parsed JSON
  orders = data.items;
} catch (error) {
  console.error(`Error parsing Snipcart API response for ${userEmail}:`, error);
  // Handle the error, maybe display a message to the user
  // orders remains an empty array in this case
}
---

<DashboardLayout title="Dashboard" activeId="orders">
  <div class="content">
    <div class="head">
      <div class="welcome-message">
        <h1>{session?.user?.name}'s Orders'</h1>
        <p>Check the history of all your orders associated with: {session.user.email}</p>
      </div>
    </div>
    <div class="orders">
      <div class="orders-list">
        <div class="orders-list-header">
          <h2>Orders</h2>
          <p>Showing orders for {session.user.email}</p>
        </div>
        {orders.map((order) => (
          <div class="orders-list-body-item">
            <div class="orders-list-body-item-header">
              <h3>Order #{order.orderId}</h3>
              <p>Order Date: {order.orderDate}</p>
            </div>
            <div class="orders-list-body-item-body">
              <p>Order Total: ${order.total}</p>
              <p>Order Status: {order.status}</p>
              <p>Email: {order.email}</p>
            </div>
          </div>
        ))}
        {orders.length === 0 && (
          <p>No orders found for this email address.</p>
        )}
      </div>
    </div>
  </div>
</DashboardLayout>
<style>
  .content {
    flex: 1;
    display: flex;
    flex-direction: column;
    margin-top: 2rem;
  }
  /* Header Styling */
  .head {
      margin-top: 5rem;
      width: 50%;
      background-color: hsla(0, 0%, 20%, 0.274);
      padding: 30px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      border-radius: 2rem;
      margin-left: auto;
      margin-right: auto;
      text-align: center;
    }

    .welcome-message h1 {
      color: #27ae60;
      font-size: 28px;
    }

    .welcome-message p {
      color: #666;
      font-size: 16px;
    }
    .order {
      margin-top: 3rem;
      width: 50%;
      background-color: hsla(0, 0%, 20%, 0.274);
      padding: 30px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      border-radius: 2rem;
      margin-left: auto;
      margin-right: auto;
    }
    .orders-list {
      margin-top: 3rem;
      width: 50%;
      background-color: hsla(0, 0%, 20%, 0.274);
      padding: 30px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      border-radius: 2rem;
      margin-left: auto;
      margin-right: auto;
    }
    .orders-list-body-item {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .orders-list-body-item-header {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .orders-list-body-item-body {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
    .orders-list-body-item-body p {
      color: #f4f2f2;
    }
    .orders-list-body-item-body p:first-child {
      font-weight: bold;
    }
    .orders-list-body-item-body p:last-child {
      font-weight: bold;
      color: #27ae60;
    }
</style>