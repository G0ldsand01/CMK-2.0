---
import DashboardLayout from "@/layouts/DashboardLayout.astro";
import Header from "@/components/Header.astro";
import { getSession } from "auth-astro/server";
const session = await getSession(Astro.request);

if (!session) {
  return Astro.redirect("/login");
}

// Clé API Snipcart (Met-la dans une variable d'environnement pour la sécurité)
const API_KEY = import.meta.env.SNIPCART_ORDERS_KEY;
const userEmail = session.user.email;

// Define the type for an order based on Snipcart's likely response
interface SnipcartOrderItem {
  id: string;
  number: number;
  status: string;
  creationDate: string;
  total: number;
  email: string; // Verify if Snipcart includes this directly
  // Add other relevant properties based on Snipcart's API
}

// Define orders with a default value (empty array)
let orders: SnipcartOrderItem[] = [];
let fetchError: string | null = null; // To store potential error messages

// Récupération des commandes depuis Snipcart pour l'email de l'utilisateur
try {
  const response = await fetch(`https://app.snipcart.com/api/orders?email=${encodeURIComponent(userEmail)}`, {
    headers: {
      Authorization: `Basic ${API_KEY}:`, // Corrected API key usage
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    console.error(`Snipcart API Error for ${userEmail}: ${response.status} ${response.statusText}`);
    fetchError = `Failed to fetch orders from Snipcart (Status: ${response.status})`;
  } else {
    const data = await response.json();
    console.log(`Snipcart API Response for ${userEmail}:`, data); // Log the parsed JSON
    orders = data.items || []; // Ensure 'items' exists and is an array
  }
} catch (error: any) {
  console.error(`Error fetching or parsing Snipcart API response for ${userEmail}:`, error);
  fetchError = `An error occurred while fetching order history: ${error.message}`;
  // orders remains an empty array in this case
}
---

<DashboardLayout title="Dashboard" activeId="orders">
  <div class="content">
    <div class="head">
      <div class="welcome-message">
        <h1>{session?.user?.name ? `${session.user.name}'s Orders` : "Your Orders"}</h1>
        <p>Check the history of all your orders associated with: {session?.user?.email || "your account"}</p>
      </div>
    </div>
    <div class="orders">
      <div class="orders-list">
        <div class="orders-list-header">
          <h1>Orders</h1>
          <p>Showing orders for {session?.user?.email || "your account"}</p>
        </div>
        {fetchError && (
          <p class="error-message">{fetchError}</p>
        )}
        {orders.map((order) => (
          <div class="orders-list-body-item">
            <div class="orders-list-body-item-header">
              <h3>Order #{order.number}</h3>
              <p>Order Date: {new Date(order.creationDate).toLocaleDateString()}</p>
            </div>
            <div class="orders-list-body-item-body">
              <p>Order Total: ${order.total.toFixed(2)}</p>
              <p>Order Status: {order.status}</p>
              {order.email && <p>Email: {order.email}</p>}
            </div>
          </div>
        ))}
        {orders.length === 0 && !fetchError && (
          <p>No orders found for this email address.</p>
        )}
      </div>
    </div>
  </div>
</DashboardLayout>
<style>
  .content {
    flex: 1;
    display: flex;
    flex-direction: column;
    margin-top: 2rem;
  }
  /* Header Styling */
  .head {
      margin-top: 5rem;
      width: 50%;
      background-color: hsla(0, 0%, 20%, 0.274);
      padding: 30px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      border-radius: 2rem;
      margin-left: auto;
      margin-right: auto;
      text-align: center;
    }

    .welcome-message h1 {
      color: #27ae60;
      font-size: 28px;
    }

    .welcome-message p {
      color: #666;
      font-size: 16px;
    }
    .order {
      margin-top: 3rem;
      width: 50%;
      background-color: hsla(0, 0%, 20%, 0.274);
      padding: 30px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      border-radius: 2rem;
      margin-left: auto;
      margin-right: auto;
    }
    .orders-list {
      margin-top: 3rem;
      width: 50%;
      background-color: hsla(0, 0%, 20%, 0.274);
      padding: 30px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      border-radius: 2rem;
      margin-left: auto;
      margin-right: auto;
    }
    .orders-list-body-item {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .orders-list-body-item-header {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .orders-list-body-item-body {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
    .orders-list-header h1 {
      font-size: 1.5rem;
      font-weight: bold;
      color: #f4f2f2;
    }
    .orders-list-body-item-body p {
      color: #f4f2f2;
    }
    .orders-list-body-item-body p:first-child {
      font-weight: bold;
    }
    .orders-list-body-item-body p:last-child {
      font-weight: bold;
      color: #27ae60;
    }
    .error-message {
      color: red;
      margin-top: 1rem;
    }
    @media (max-width: 768px) {
      .orders-list {
        width: 90%;
      }
      .head {
        width: 90%;
      }
      .order {
        width: 90%;
      }

    }
</style>