---
import { ordersTable, productsTable } from '@/db/schema';
import AdminDashboardLayout from '@/layouts/AdminDashboardLayout.astro';
import db from '@/lib/db';
import { getUser } from '@/lib/user';
import { eq, inArray } from 'drizzle-orm';

const user = await getUser(Astro.request);
if (!user || !user.isAdmin()) {
	throw Astro.redirect('/login');
}

const { id } = Astro.params;

const [order] = await db
	.select({
		id: ordersTable.id,
		status: ordersTable.status,
		cartJSON: ordersTable.cartJSON,
		createdAt: ordersTable.createdAt,
	})
	.from(ordersTable)
	.where(eq(ordersTable.id, Number(id)));

if (!order) {
	throw Astro.redirect('/dashboard/admin/orders');
}

// Extract product IDs
const productIds = order.cartJSON.map((item) => item.products.id);
const products = await db
	.select()
	.from(productsTable)
	.where(inArray(productsTable.id, productIds));
// Combine cart and product data
const orderItems = order.cartJSON
	.map((item) => {
		const product = products.find((p) => p.id === item.products.id);
		return {
			...item,
			product,
		};
	})
	.filter((item) => item.product); // remove items where product is undefined

const totalPrice = orderItems.reduce((sum, item) => {
	return sum + (Number(item.product?.price) || 0) * item.cart.quantity;
}, 0);

const orderData = {
	id: order.id,
	status: order.status,
	createdAt: order.createdAt,
	items: orderItems,
	total: totalPrice,
};
const missingIds = productIds.filter(
	(id) => !products.find((p) => p.id === id),
);
if (missingIds.length) {
	console.warn('Produits manquants dans la DB:', missingIds);
}
---

<AdminDashboardLayout
  title="Order"
  breadcrumb={{
    '/orders': 'Manage Orders',
    [`/order/${id}`]: `Order ${id}`,
  }}
>
  <div class="content">
    <div class="head">
      <div class="welcome-message">
        <h1>Order Details</h1>
        <p>Manage your account settings</p>
      </div>
    </div>

    <div class="order-details">
      <div class="order-details-item">
        <div class="order-details-item-title"><h1>Order ID</h1></div>
        <div class="order-details-item-value">{orderData.id}</div>
      </div>
      <div class="order-details-item">
        <div class="order-details-item-title"><h1>Status</h1></div>
        <div class="order-details-item-value">{orderData.status}</div>
      </div>
      <div class="order-details-item">
        <div class="order-details-item-title"><h1>Created At</h1></div>
        <div class="order-details-item-value">{orderData.createdAt}</div>
      </div>

      <div class="order-details-item">
        <div class="order-details-item-title"><h1>Order Content</h1></div>
        <div class="order-details-item-value">
          {
            orderData.items.length > 0 ? (
              orderData.items.map((item) => (
                <div class="product-item">
                  <img
                    src={item.product?.image}
                    alt={item.product?.name}
                    width="50"
                  />
                  <div>
                    <strong>{item.product?.name}</strong>
                    <br />
                    Quantity: {item.cart.quantity}
                    <br />
                    Price: ${item.product?.price} each
                    <br />
                    Total: ${item.cart.quantity * Number(item.product?.price)}
                  </div>
                </div>
              ))
            ) : (
              <div>Aucun produit trouv√© pour cette commande.</div>
            )
          }
        </div>
      </div>

      <div class="order-details-item">
        <div class="order-details-item-title">Total</div>
        <div class="order-details-item-value">
          ${orderData.total}
        </div>
      </div>
    </div>
  </div>
</AdminDashboardLayout>

<style>
  .content {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin-top: 2rem;
    margin-left: auto;
    margin-right: auto;
    width: 50%;
  }

  .head {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    background-color: var(--color-muted);
    padding: 30px;
    box-shadow: 0 4px 12px var(--color-shadow);
    border-radius: 2rem;
    margin-left: auto;
    margin-right: auto;
  }

  .welcome-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    margin-left: auto;
    margin-right: auto;
  }

  .welcome-message h1 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    display: flex;
    justify-content: center;
  }

  .welcome-message p {
    font-size: 1rem;
    margin-bottom: 0;
  }

  .order-details {
    background-color: var(--color-muted);
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 10px var(--color-shadow);
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: 2rem;
  }

  .order-details-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .order-details-item-title {
    font-weight: bold;
    font-size: 1rem;
  }

  .order-details-item-value {
    font-size: 1rem;
  }

  .product-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    border-bottom: 1px solid #444;
    padding: 1rem 0;
  }

  .product-item img {
    border-radius: 0.5rem;
  }

  @media (max-width: 1400px) {
    .content {
      width: 90%;
    }
    .head {
      width: 90%;
    }
    .order-details {
      margin: auto;
      width: 90%;
    }
    .order-details-item {
      margin-bottom: 1rem;
      font-size: 0.8rem;
    }
  }
</style>
