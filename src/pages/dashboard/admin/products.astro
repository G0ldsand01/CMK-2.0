---
import { actions } from 'astro:actions';
import ProductCard from '@/components/ProductCard.astro';
import AdminDashboardLayout from '@/layouts/AdminDashboardLayout.astro';
import { getUser } from '@/lib/user';
import { Plus } from 'lucide-react';

const user = await getUser(Astro.request);

if (!user || !user.isAdmin()) {
	return Astro.redirect('/dashboard');
}
const bestProductsActions = await Astro.callAction(
	actions.products.getProductsByType,
	{
		type: 'products',
	},
);
const bestProducts = bestProductsActions.data;
const categories = ['mouse', 'keyboard', 'headset'];
const types = ['products', 'models', 'tech', 'iot'];
---

<AdminDashboardLayout
  title="Add New Products"
  breadcrumb={{
    '/products': 'Manage Products',
  }}
>
  <div class="content">
    <div class="head">
      <div class="welcome-message">
        <h1>Add New Products</h1>
        <p>Manage your account settings</p>
      </div>
    </div>
    <div class="products-grid">
      {
        bestProducts && bestProducts.length > 0 ? (
          <>
            {bestProducts.map((product) => (
              <ProductCard product={product} server:defer />
            ))}
            <div class="add-product">
              <button
                type="button"
                class="add-product-button"
                id="openModalButton"
              >
                <Plus size={60} color="#27ae60" className="glowing-plus" />
              </button>
            </div>
          </>
        ) : (
          <p>No products found</p>
          <div class="add-product">
              <button
                type="button"
                class="add-product-button"
                id="openModalButton"
              >
                <Plus size={60} color="#27ae60" className="glowing-plus" />
              </button>
            </div>
        )
      }
    </div>
    <div class="modal-overlay" id="modalOverlay">
      <div class="modal-content" id="modalContent">
        <h2 class="modal-title">Add New Product</h2>
        <form id="addProductForm">
          <label for="name">Product Name:</label>
          <input type="text" name="name" id="name" class="inputs" required />
          <label for="price">Price:</label>
          <input
            type="number"
            name="price"
            id="price"
            class="inputs"
            required
          />
          <label for="description">Description:</label>
          <textarea name="description" id="description" class="inputs" required
          ></textarea>
          <label for="image">Image:</label>
          <input
            type="file"
            name="image"
            id="image"
            class="inputs"
            accept="image/*"
            required
          />
          <label for="type">Type:</label>
          <select name="type" id="type" class="inputs" required>
            {types.map((type) => <option value={type}>{type}</option>)}
          </select>
          <label for="category">Category:</label>
          <select name="category" id="category" class="inputs" required>
            {
              categories.map((category) => (
                <option value={category}>{category}</option>
              ))
            }
          </select>
          <button type="submit">Add Product</button>
          <button type="button" class="cancel-button" id="closeModalButton">
            Cancel
          </button>
        </form>
      </div>
    </div>
  </div>
</AdminDashboardLayout>

<script>
  import { actions } from 'astro:actions';
  import { toast } from 'sonner';

  document.addEventListener('DOMContentLoaded', () => {
    const openModalButton = document.getElementById('openModalButton');
    const closeModalButton = document.getElementById('closeModalButton');
    const modalOverlay = document.getElementById('modalOverlay');
    const addProductForm = document.getElementById('addProductForm');
    const modalContent = document.getElementById('modalContent');

    openModalButton?.addEventListener('click', () => {
      modalOverlay?.classList.add('active');
      modalContent?.classList.add('active');
    });

    closeModalButton?.addEventListener('click', () => {
      modalOverlay?.classList.remove('active');
      modalContent?.classList.remove('active');
    });

    modalOverlay?.addEventListener('click', (event) => {
      if (event.target === modalOverlay) {
        modalOverlay.classList.remove('active');
        modalContent?.classList.remove('active');
      }
    });

    addProductForm?.addEventListener('submit', async (event) => {
      event.preventDefault();

      try {
        const formData = new FormData(addProductForm as HTMLFormElement);

        // Get the image file
        const imageFile = formData.get('image') as File;

        if (!imageFile || imageFile.size === 0) {
          toast.error('Please select an image file');
          return;
        }

        // Show loading toast
        const loadingToast = toast.loading('Uploading image...');

        // Convert the image to base64
        let imageBase64 = '';
        if (imageFile) {
          const reader = new FileReader();
          imageBase64 = await new Promise((resolve) => {
            reader.onload = (e) => resolve(e.target?.result as string);
            reader.readAsDataURL(imageFile);
          });
        }

        // Hide loading toast
        toast.dismiss(loadingToast);

        // Show uploading toast
        const uploadingToast = toast.loading('Adding product...');

        const result = await actions.products.addProduct({
          name: (formData.get('name') as string) || '',
          price: Number(formData.get('price')) || 0,
          description: (formData.get('description') as string) || '',
          image: imageBase64,
          type: (formData.get('type') as string) || '',
          category: (formData.get('category') as string) || '',
          stock: 0,
        });

        // Hide uploading toast
        toast.dismiss(uploadingToast);

        if (result.error) {
          console.error('Error details:', result.error);

          // Handle specific error cases
          if (result.error.message.includes('duplicate key value')) {
            toast.error(
              'A product with this ID already exists. Please try again.'
            );
          } else {
            toast.error('Error adding product: ' + result.error.message);
          }
        } else {
          toast.success('Product added successfully');
          modalOverlay?.classList.remove('active');
          modalContent?.classList.remove('active');
          window.location.reload(); // Reload to show the new product
        }
      } catch (error) {
        console.error('Unexpected error:', error);
        toast.error('An unexpected error occurred. Please try again.');
      }
    });
  });
</script>
<style>
  html,
  body {
    height: 100%;
    margin: 0;
    overflow-y: auto; /* Ensures vertical scrolling is enabled */
  }
  .container {
    min-height: 100vh; /* Ensures the container takes up full viewport height */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  .head {
    margin-top: 5rem;
    width: 50%;
    background-color: var(--color-muted);
    padding: 30px;
    box-shadow: 0 4px 12px var(--color-border);
    border-radius: 2rem;
    margin-left: auto;
    margin-right: auto;
    text-align: center;
    color: #27ae60;
    font-size: 28px;
    font-weight: bold;
    margin-bottom: 10px;
  }
  .welcome-message h1 {
    color: #20c464;
    font-size: 2rem;
    margin-bottom: 1rem;
  }
  .welcome-message p {
    color: var(--color-foreground);
    font-size: 1rem;
    margin-bottom: 1rem;
  }
  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    margin: 5%;
    position: relative; /* To position the add product card */
  }
  .products-grid .product {
    background-color: var(--color-muted);
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px var(--color-shadow);
    transition: all 0.2s ease-in-out;
    border: solid 3px var(--color-border);
  }
  .products-grid .product:hover {
    box-shadow: 0 8px 24px var(--color-shadow);
    border: solid 3px var(--color-border-hover);
  }
  .add-product {
    background-color: var(--color-muted);
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px var(--color-shadow);
    transition: all 0.2s ease-in-out;
    border: solid 3px var(--color-border);
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .add-product:hover {
    box-shadow: 0 8px 24px var(--color-shadow);
    border: solid 3px var(--color-border-hover);
  }

  .add-product-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .glowing-plus {
    filter: drop-shadow(0 0 10px rgba(39, 174, 96, 0.7));
    animation: pulsate 1.5s infinite alternate;
  }

  @keyframes pulsate {
    from {
      opacity: 0.8;
      transform: scale(1);
    }
    to {
      opacity: 1;
      transform: scale(1.1);
    }
  }

  /* Modal Styles */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: none; /* Hidden by default */
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease-in-out;
  }

  .modal-overlay.active {
    display: flex;
    opacity: 1;
    visibility: visible;
  }

  .modal-content {
    background-color: var(--color-muted);
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 10px var(--color-shadow);
    width: 50%;
    max-width: 600px;
    opacity: 0;
    transform: translateY(-20px);
    transition: all 0.3s ease-in-out;
  }

  .modal-content.active {
    opacity: 1;
    transform: translateY(0);
  }

  .modal-title {
    color: #27ae60;
    font-size: 24px;
    margin-bottom: 1rem;
    text-align: center;
  }

  .modal-content form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .modal-content label {
    color: var(--color-foreground);
    font-weight: bold;
  }

  .modal-content input,
  .modal-content select,
  .modal-content textarea {
    width: 100%;
    padding: 12px;
    border: 2px solid var(--color-border);
    border-radius: 8px;
    background-color: var(--color-background);
    color: var(--color-foreground);
    outline: none;
    transition: border 0.3s ease-in-out;
  }

  .modal-content input:focus,
  .modal-content select:focus,
  .modal-content textarea:focus {
    border-color: var(--color-border-hover);
    box-shadow: 0 0 8px var(--color-shadow);
  }

  .modal-content button[type='submit'],
  .modal-content .cancel-button {
    margin-top: 1rem;
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background 0.3s ease-in-out;
    font-weight: bold;
  }

  .modal-content button[type='submit'] {
    background-color: #27ae60;
    color: #fff;
  }

  .modal-content button[type='submit']:hover {
    background-color: #20c464;
  }

  .modal-content .cancel-button {
    background-color: var(--button-cancel-color, #e74c3c);
    color: #fff;
  }

  .modal-content .cancel-button:hover {
    background-color: var(--button-cancel-hover-color, #c0392b);
  }

  .modal-content button[type='submit'],
  .modal-content .cancel-button {
    width: 100%;
  }

  @media (max-width: 1000px) {
    .modal-content {
      width: 80%;
      padding: 1.5rem;
    }
    .head {
      width: 90%;
    }
  }
</style>
